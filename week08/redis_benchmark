1. 使用 redis benchmark 工具, 测试 10 20 50 100 200 1k 5k 字节 value 大小，redis get set 性能。
env: centos7.2 4CoreCpu 3GBRam
redis: version6.2.6
使用命令：./redis-benchmark -h 127.0.0.1 -p 6379 -c 50 -n 10000 -d {{size}} -t get,set --csv
10kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","57142.86","0.548","0.104","0.303","1.463","6.815","13.975"
    "GET","62111.80","0.495","0.096","0.303","1.671","4.135","4.895"
20kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","68965.52","0.413","0.088","0.303","1.127","2.239","3.527"
    "GET","51546.39","0.677","0.088","0.311","2.247","6.591","14.247"
50kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","51546.39","0.576","0.096","0.303","2.183","5.159","14.551"
    "GET","67114.09","0.406","0.096","0.295","0.999","2.439","5.767"
100kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","67114.09","0.445","0.080","0.303","1.167","3.295","4.303"
    "GET","58479.53","0.471","0.096","0.303","1.359","4.023","8.151"
200kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","52631.58","0.623","0.096","0.311","1.951","5.255","19.375"
    "GET","69444.45","0.395","0.096","0.303","0.815","2.543","3.023"
1000kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","56497.18","0.533","0.104","0.319","1.607","3.567","8.663"
    "GET","51813.47","0.550","0.064","0.319","1.415","3.343","36.959"
5000kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","51282.05","0.669","0.056","0.343","1.311","2.951","39.167"
    "GET","51546.39","0.525","0.144","0.335","0.903","2.519","32.111"
20000kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","46511.63","0.673","0.104","0.439","2.007","3.375","9.399"
    "GET","40816.32","0.970","0.168","0.767","2.455","3.815","7.567"
30000kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","36496.35","0.902","0.248","0.479","2.207","6.791","30.831"
    "GET","34364.26","1.087","0.192","0.807","3.231","5.647","11.999"
40000kb:
    "test","rps","avg_latency_ms","min_latency_ms","p50_latency_ms","p95_latency_ms","p99_latency_ms","max_latency_ms"
    "SET","34843.21","0.938","0.120","0.567","2.311","4.039","19.855"
    "GET","29069.77","1.067","0.224","0.775","2.911","7.591","11.303"
结果：当get、set的value值越大，rps吞吐下降的越明显；因为使用的是--csv输出，其实明细里更可以观测到各个P(N)线的指标都会下降；1000kb以内总体影响不是特别大（在当前的机器配置下）；如果测试环境配置更好的话，
结果可能更好点，影响redis的不止内存，还有cpu的架构等其他因素

2.写入一定量的 kv 数据, 根据数据大小 1w-50w 自己评估, 结合写入前后的 info memory 信息 , 分析上述不同 value 大小下，平均每个 key 的占用内存空间。
1W个数据
    used_memory:898264
    used_memory:1429336
    avg(size/keys)=53字节
5W个数据
    used_memory:898264
    used_memory:4063520
    avg(size/keys)=63字节
10W个数据
    used_memory:898264
    used_memory:7388912
    avg(size/keys)=64字节
15W个数据
    used_memory:898264
    used_memory:12687168
    avg(size/keys)=78字节
20W个数据
    used_memory:898264
    used_memory:14839696
    avg(size/keys)=69字节
30W个数据
    used_memory:898264
    used_memory:25435104
    avg(size/keys)=81字节
40W个数据
    used_memory:898264
    used_memory:29739056
    avg(size/keys)=72字节
50W个数据
    used_memory:898264
    used_memory:36140160
    avg(size/keys)=70字节
结果：随着key的数量的增加，平均每个key的size，整体是成上涨趋势的
redis保存string类型的数据，会有一个SDS（简单动态字符串）结构体来保存，其包含buf，len,alloc，
除了这个sds还有一个来自于RedisObject结构体的开销，所以一个简单的kv，它还包含其他元数据的开销。
当字符串<=44字节时候，redisObject中的元数据、指针和SDS是一块的内存区域，这样就避免内存碎片；反之SDS会分配独立的空间，随着kv的增加，碎片化也变得明显。
除了额外的SDS和RedisObject开销，还有一个全局哈希表的开销，全局哈希表会保存素有键值对